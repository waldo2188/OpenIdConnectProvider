security:
    encoders:
        Waldo\OpenIdConnect\ModelBundle\Entity\Account: 
            algorithm: bcrypt
            cost: 12
        Waldo\OpenIdConnect\ModelBundle\Entity\Client: plaintext
        
    role_hierarchy:
        ROLE_ADMIN:       ROLE_USER
        ROLE_SUPER_ADMIN: [ ROLE_ADMIN, ROLE_ALLOWED_TO_SWITCH ]

    providers:
        multiples:
            chain:
                providers: [ldap, accounts]
        accounts:
            entity: { class: WaldoOpenIdConnectModelBundle:Account, property: email }
        ldap:
            id: waldo_oic_ldap.security.user.provider
        clients:
            entity: { class: WaldoOpenIdConnectModelBundle:Client, property: clientId }

    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false

        tokenArea:
            pattern:   ^/token
            anonymous: ~
            provider: clients
            http_basic:
                realm: "Secured Area"

        authenticationArea:
            pattern:   ^/
            anonymous: ~
            provider: multiples
            waldo_oic_ldap: ~
            form_login:
                login_path: login
                check_path: login_check
                success_handler: waldo_oic_p.success_handler.auth
                failure_handler: waldo_oic_p.failure_handler.auth
                csrf_provider: form.csrf_provider
            logout:
                path: logout
                success_handler: waldo_oic_p.success_handler.logout
            switch_user: ~
                
    access_control:
        - { path: ^/token, roles: ROLE_OIC_CLIENT }
        - { path: ^/authentication/login(/)?(.*)$, roles: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/authorize, roles: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/authentication/, roles: ROLE_USER }
        - { path: ^/account/, roles: ROLE_USER }
        - { path: ^/admin/, roles: ROLE_ADMIN }

waldo_oic_ldap:
    client:
        host: %ldap_host%
        port: 389
        
    user:
        base_dn: ou=people,dc=nyu,dc=org
        email_attribute: mail
        
    roles:
        classic:
            base_dn: ou=people,dc=nyu,dc=org
            filter: (givenName=me)
            name_attribute: cn
            user_attribute: uid
            user_id: username
            roles: [ROLE_USER, ROLE_LDAP]
        plo:
            base_dn: ou=people,dc=nyu,dc=org
            filter: (givenName=me)
            name_attribute: cn
            user_attribute: uid
            user_id: username
            roles: [ROLE_USERXXXX]